HRE_law_group = {
	default = law_name 	# Optional. New rulers will by default use this law, as long as its "should_start_with" trigger returns true or is not defined
	cumulative = yes 	# If set, each subsequent law in the group will provide all effects of the previous law
	
	flag = some_arbitrary_flag	# See below for flags treated specially. Also can check it in the data/GUI system with LawGroup.HasFlag('some_arbitrary_flag')
	
	hre_law_1 = {
		can_keep = {		# Requirements for keeping the law in the ruler's scope. If this invalidates, the law will be replaced with the default law (see own section) within a month. Also checked after changing faith since doctrinal changes are likely to invalidate laws. Always true if not specified.
		always = yes
		}
		can_have = {		# Requirements for adopting the law in the ruler's scope. If this is true, the character is allowed to adopt the law and the law will show as available (but it can be currantly disabled if can_pass is false). Always true if not specified.
		always = yes
		}
		can_pass = {		# Requirements for adopting the law in the ruler's scope. For more temporary conditions, e.g. being at war ("I can have the law, but can't pass it right now"). Always true if not specified.
		always = yes
		}
		should_start_with = { # If these conditions are true, this is a valid law to start with. Note that it always includes the can_keep check.
			always = no
		}
		
		can_title_have = {	# Requirements for titles being able to have this law, in the title's scope. Always false if not specified
			always = yes
		}

		pass_cost = { gold = 100 }	# Cost of enacting this law

		revoke_cost = { prestige = -1000 }  # Cost of revoking or clearing this law

		modifier = { 	# Modifier applied to the ruler when this law is active
			prestige = 1
			feudal_government_tax_contribution_mult = -0.50
			vassal_levy_contribution_mult = -0.50
		}
		flag = some_arbitrary_flag	# See below for flags treated specially. Also can be checked in script with has_realm_law_flag = some_arbitrary_flag

		on_pass = {		# Effect run on ruler when the law is added. Does *NOT* get run when default laws are initialized, nor when inheriting a law from someone else. If this is done on a title, the title is accessible as scope:title
		}
		on_revoke = {	# Effect run on ruler when the law is removed. Does *NOT* get run when law is removed due to inheriting a law from someone else. If this is done on a title, the title is accessible as scope:title
		}

		# Succession rules. Any new law with a rule set will override the previous law's rule.
		# succession = {
		# 	order_of_succession = inheritance/election/theocratic/company

		# 	# For inheritance:
		# 	title_division = partition/single_heir	# only "traversal_order = children" supports partition
		# 	traversal_order = children/dynasty_house/dynasty
		# 	rank = oldest/youngest

		# 	# For theocratic & company:
		# 	pool_character_config = key		# entry in common/pool_character_selectors, used when choosing a character from the pool or generating a new one

		# 	# For election:
		# 	election_type = key				# entry in common/succession_election

		# 	# Generic rules:
		# 	gender_law = male_only/male_preference/equal/female_preference/female_only
		# 	faith = same_faith/same_religion/same_family	# Faith restrictions on who can inherit. If no one fulfilling this is found, the restriction is ignored (but titles with the flag destroy_if_invalid_heir = yes will be destroyed)
		# 	create_primary_tier_titles = yes 	# If set, then under partition all titles you can create of your primary tier will be created for free, resulting in a more split-up realm
		# 	primary_heir_minimum_share = 0.5	# The primary heir will get at least this portion of titles, which means if there's a lot of heirs the primary still gets a lot of land
		# }

		ai_will_do = { 0 }				# Script value in ruler scope. If above 0, the AI will enact this law if able. Law enactment is checked in the RARE_TASK_TICK. If multiple laws are possible, the AI will enact the one with the highest score
	}
	another_law_name = {}
}